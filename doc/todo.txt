TODOs:
 o rename pdsolver, introduce namespace 
 o epi_huber -> epi_conj_huber (TM)
 o Create doxygen
 o epi_piecewise_lin -> epi_maxlin1d (EL)
 o add math_utils.hpp to util for Halfspace projection etc
 o if someone passes a sparse-matrix instead of a linear operator to the 
   solver, automatically build a LinOpSparse inside the mex-Function.
 o prox operator constructor in matlab doesn't need index -- infer
   this automatically. -> add comfortable interface where user
   declares "variables".
 o ? default arguments for prox operator, add simpler prox operators
   such as prox_l1 etc. which in turn create a prox_1d
 o ? Fix bug where residuals are 0 at beginning?
 o Check whether is necessary to static_cast<real>(1) and so
   on... (compile time cast!!)
 o ? Do sanity check before creating the prox operators (don't allocate
   stuff inside the constructor)
 o Test Simplex prox (multilabel segmentation example, with few
 labels)
 o Add LinOpTranspose
 o Have DEBUG/Verbose mode, which outputs lots of information. TODO:
   make factory etc verbose. For verbose=false, solver is completely silent
 o Write CMakeLists.txt and pdsolver_build.m properly so it builds
   nicely on Windows
 o Check coding style with lint / use cpplint to ensure google-style-guide
 o run with valgrind/cuda-memcheck/cuda-gdb to check for memleaks
 o Python/C/C++ bindings

Done:
 x Check for Memory Leaks and Out-Of-Bounds accesses in CUDA kernels.
 x Investigate why everything crashes when MATLAB GUI is on but works
   with console
 x Lifted TV stereo example
 x Lifted TV rof denoising example
 x Adapt to google C++ style guide
 x MATLAB callback, output primal-dual gap in ex_rof.m
 x Output Memory Requirement for Solver
 x Diagonal Preconditioner Options (off/on/equilibration), only "off" for now
 x ProxNorm2 is broken, fix it
 x Test with double precision
 x Adaptive Steps for PDHG backend
 x Simplex Projection prox (not useful due to limited shared memory)
 x Diagonal Preconditioning a la Pock
 x Add check if prox operators cover the whole primal/dual domain
 x Stopping Criterion?
 x Test Moreau prox
 x Epigraph prox, continuous relaxation
 x Add LinearOperator class, for now only LinearOperatorSparseMatrix,
   maybe LinearOperatorZero (cudaMemset) and LinearOperatorIdentity (cudaMemcpy). 
 x Write helper functions for interleaved index calculation and
   double=>real conversion
 x Add folder for unit-tests
 x prox_1d als arbitrary_transformation
 x use thrust::device_vector instead of raw pointers everywhere
 x thrust exceptions
 x shared_ptr und C++11 features for(auto a : liste) verwenden
 x hardcoded adaptivity every 250 steps --> add parameter 
 x int -> size_t
 x Add templates instead of typedef real float...
 x Add LinOpZero and make LinOp an abstract base class
 x Write proper error handling/checking code, with exceptions and have
   meaningful error messages. 
 x Add own exception class
 x Unit tests for prox operators
 x prox_1d die function als template parameter

Ideas of cool Prox-Operators to implement:
 o implement prox_scaled, remove prox_epi_conjquadr_scaled
 o identity, 0 <= x <= 1, x <= 0, max(0, x), pogs
 o q>1, elastic net
 o constraint sets from lifting papers
 o nuclear norm
 o x^T A x + b^T x + c
 o second order cone projection
 o elastic net
 o projection onto epigraph of shifted parabola ||x - f||^2 = a x^T x + b^T x
 o l_infty norms, full l1 ball
 o general function of singular values?
 o mixed matrix norms
 o (nonconvex nuclear norm)
 o (l^q (0<=q<infty) 1d, nuclear & 2-norm)
 o (mumford-shah 1d & 2-norm)
 o Prox-Transformationen aus Combettes Paper

 external?
 o linear operator (1/2) ||Ax-b||^2 with cuFFT
 o linear operator (preconditioned) conjugate gradient
 o (smooth (semiconvex) mumford-shah 1d & 2-norm)

 
